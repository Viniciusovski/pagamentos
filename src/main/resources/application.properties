spring.application.name=pagamentos-ms
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/alurafood-pagamento?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true

# para indicarmos onde está o servidor do Eureka, qual o nome da aplicação,
# entre outras configurações necessárias para conseguirmos conectar o nosso
# serviço de pagamentos no Eureka.
# server.port=0 - Para não se preocupar com a porta pois o Eureka vai
# controlar a porta que o serviço vai subir
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka

server.port=0

# Configuracoes da instancia para o circuit breaker

# Define quantas requisicoes eu vou fazer um estatistica, para saber se ele pode passar para o estado aberto ou para o fechado.
resilience4j.circuitbreaker.instances.atualizaPedido.slidingWindowSize: 3

# Indica qual o número mínimo de chamadas que temos que fazer até o circuit breaker entrar em ação
resilience4j.circuitbreaker.instances.atualizaPedido.minimumNumberOfCalls: 2

# É o tempo que vai ser mantido no estado de aberto, configuramos por 50 segundos, visto que o teste vai ser rapido
resilience4j.circuitbreaker.instances.atualizaPedido.waitDurationInOpenState: 50s